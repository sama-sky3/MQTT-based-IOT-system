[
    {
        "id": "51c2d3b775ae92e4",
        "type": "tab",
        "label": "iot task 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d7cf6043bb896a4f",
        "type": "mqtt out",
        "z": "51c2d3b775ae92e4",
        "name": "",
        "topic": "actuator/servo_control",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "84e16b9b8420985d",
        "x": 1000,
        "y": 120,
        "wires": []
    },
    {
        "id": "139d146aaf3e760b",
        "type": "mqtt in",
        "z": "51c2d3b775ae92e4",
        "name": "",
        "topic": "sensor/ir_data",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "84e16b9b8420985d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 120,
        "wires": [
            [
                "3ddb43a7276456e0",
                "2397560d520a3320",
                "170a3b0e35509911",
                "49385fa85bee3aa8"
            ]
        ]
    },
    {
        "id": "3ddb43a7276456e0",
        "type": "function",
        "z": "51c2d3b775ae92e4",
        "name": "function 1",
        "func": "// Assuming the incoming payload is a JSON object like { \"angle\": 90 }\nlet command = msg.payload;  // msg.payload will contain the incoming message\n\n// Check if the angle is defined and is a valid number\nif (command && command.angle !== undefined && !isNaN(command.angle)) {\n    // Prepare the new message to send to ESP32\n    let servoCommand = {\n        payload: {\n            angle: command.angle  // Sending the angle to ESP32\n        }\n    };\n\n    // Output the message to pass it to the next node\n    return servoCommand;\n} else {\n    // If the incoming message is invalid, return an error message\n    return { payload: \"Invalid command\" };\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 240,
        "wires": [
            [
                "d7cf6043bb896a4f"
            ]
        ]
    },
    {
        "id": "49385fa85bee3aa8",
        "type": "ui_text",
        "z": "51c2d3b775ae92e4",
        "group": "2e53ed9b8ddce291",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "text",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 450,
        "y": 100,
        "wires": []
    },
    {
        "id": "b78c63568e999b63",
        "type": "ui_button",
        "z": "51c2d3b775ae92e4",
        "name": "",
        "group": "533801f65113ab71",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Rotate Servo to 180",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{ \"angle\": 180}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 760,
        "y": 60,
        "wires": [
            [
                "d7cf6043bb896a4f"
            ]
        ]
    },
    {
        "id": "2397560d520a3320",
        "type": "debug",
        "z": "51c2d3b775ae92e4",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 160,
        "wires": []
    },
    {
        "id": "170a3b0e35509911",
        "type": "function",
        "z": "51c2d3b775ae92e4",
        "name": "function 2",
        "func": "let detect = msg.payload;\nlet response = {};\n\nif (detect.ir_sensor_value == 0) {\n    response.payload = \"Object Detected\";\n} else {\n    response.payload = \"No Object Detected\";\n}\n\nreturn response;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 60,
        "wires": [
            [
                "7ce7d5b778e2fae1"
            ]
        ]
    },
    {
        "id": "7ce7d5b778e2fae1",
        "type": "ui_text",
        "z": "51c2d3b775ae92e4",
        "group": "2e53ed9b8ddce291",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "text",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 430,
        "y": 40,
        "wires": []
    },
    {
        "id": "84e16b9b8420985d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "a2evowr5vzusx3-ats.iot.us-east-1.amazonaws.com",
        "port": "8883",
        "tls": "d3cfcb82aa508cf6",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2e53ed9b8ddce291",
        "type": "ui_group",
        "name": "IR Data",
        "tab": "c1b912c7d13b6f15",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "533801f65113ab71",
        "type": "ui_group",
        "name": "Servo Control",
        "tab": "c1b912c7d13b6f15",
        "order": 2,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "d3cfcb82aa508cf6",
        "type": "tls-config",
        "name": "cert",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "device-certificate.pem.crt",
        "keyname": "private.pem.key",
        "caname": "AmazonRootCA1.pem",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "c1b912c7d13b6f15",
        "type": "ui_tab",
        "name": "Sensor Dashboard",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    }
]